{"ast":null,"code":"import _slicedToArray from \"/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/src/components/todo.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTodo } from '../requests/fetchApi';\nimport { todoCommit } from '../actions/getDataActions';\nimport { dataStatus } from '../actions/dataStatusActions';\n\nfunction Todo(props) {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        fetchedTodo = _useState2[0],\n        setFetchedTodo = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        todoItems = _useState4[0],\n        setTodoItems = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        dataStatus = _useState6[0],\n        setDataStatus = _useState6[1]; // get data after the first render\n\n\n  useEffect(() => {\n    fetchTodo().then(result => {\n      props.todoCommit({\n        body: result\n      });\n    });\n  }, []); // map data when ever fetchedTodo is updated\n\n  useEffect(() => {\n    const renderTodo = Array.from(fetchedTodo).reverse().map(item => {\n      return React.createElement(\"li\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, item.body);\n    });\n    setTodoItems(renderTodo);\n  }, [fetchedTodo]); // update data when ever store is updated and not an empty array\n\n  useEffect(() => {\n    props.todo != [] && props.loader == null ? setFetchedTodo(props.todo) : console.log();\n    ;\n  }, [props.todo]);\n  return React.createElement(\"div\", {\n    id: \"todo-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"container-title red-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Todo\"), React.createElement(\"ul\", {\n    id: \"todo-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, todoItems));\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const todo = state.todo,\n        loader = state.loader;\n  console.log(state);\n  return {\n    todo: todo,\n    loader: loader\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    todoCommit: data => {\n      dispatch(todoCommit(data));\n    },\n    todoDataStatus: data => {\n      dispatch(dataStatus(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo);","map":{"version":3,"sources":["/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/src/components/todo.js"],"names":["React","useState","useEffect","connect","fetchTodo","todoCommit","dataStatus","Todo","props","fetchedTodo","setFetchedTodo","todoItems","setTodoItems","setDataStatus","then","result","body","renderTodo","Array","from","reverse","map","item","id","todo","loader","console","log","mapStateToProps","state","ownProps","mapDispatchToProps","dispatch","data","todoDataStatus"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,SAAQC,SAAR,QAAwB,sBAAxB;AACA,SAAQC,UAAR,QAAyB,2BAAzB;AACA,SAAQC,UAAR,QAAyB,8BAAzB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAoB;AAAA,oBACoBP,QAAQ,CAAC,EAAD,CAD5B;AAAA;AAAA,QACXQ,WADW;AAAA,QACEC,cADF;;AAAA,qBAEgBT,QAAQ,CAAC,EAAD,CAFxB;AAAA;AAAA,QAEXU,SAFW;AAAA,QAEAC,YAFA;;AAAA,qBAGkBX,QAAQ,EAH1B;AAAA;AAAA,QAGXK,UAHW;AAAA,QAGCO,aAHD,kBAKlB;;;AACAX,EAAAA,SAAS,CAAC,MAAI;AACVE,IAAAA,SAAS,GAAGU,IAAZ,CAAkBC,MAAD,IAAU;AAC3BP,MAAAA,KAAK,CAACH,UAAN,CAAiB;AAACW,QAAAA,IAAI,EAAED;AAAP,OAAjB;AACD,KAFC;AAGH,GAJQ,EAIN,EAJM,CAAT,CANkB,CAYlB;;AACAb,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMe,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWV,WAAX,EAAwBW,OAAxB,GAAkCC,GAAlC,CAAuCC,IAAD,IAAQ;AAC/D,aAAO;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmBD,IAAI,CAACN,IAAxB,CAAP;AACD,KAFkB,CAAnB;AAGAJ,IAAAA,YAAY,CAACK,UAAD,CAAZ;AACD,GALQ,EAKN,CAACR,WAAD,CALM,CAAT,CAbkB,CAoBlB;;AACAP,EAAAA,SAAS,CAAC,MAAI;AACXM,IAAAA,KAAK,CAACgB,IAAN,IAAc,EAAd,IAAoBhB,KAAK,CAACiB,MAAN,IAAgB,IAArC,GAA4Cf,cAAc,CAACF,KAAK,CAACgB,IAAP,CAA1D,GAAyEE,OAAO,CAACC,GAAR,EAAzE;AAAuF;AACxF,GAFQ,EAEN,CAACnB,KAAK,CAACgB,IAAP,CAFM,CAAT;AAKE,SACE;AAAK,IAAA,EAAE,EAAC,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,2BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAI,IAAA,EAAE,EAAC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,SADH,CAFF,CADF;AAQH;;AAED,MAAMiB,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAmB;AAAA,QAClCN,IADkC,GAClBK,KADkB,CAClCL,IADkC;AAAA,QAC5BC,MAD4B,GAClBI,KADkB,CAC5BJ,MAD4B;AAEzCC,EAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,SAAM;AACJL,IAAAA,IAAI,EAAEA,IADF;AAEJC,IAAAA,MAAM,EAAEA;AAFJ,GAAN;AAID,CAPD;;AAQA,MAAMM,kBAAkB,GAAIC,QAAD,IAAY;AACrC,SAAM;AACJ3B,IAAAA,UAAU,EAAG4B,IAAD,IAAQ;AAAED,MAAAA,QAAQ,CAAC3B,UAAU,CAAC4B,IAAD,CAAX,CAAR;AAA4B,KAD9C;AAEJC,IAAAA,cAAc,EAAGD,IAAD,IAAQ;AAAED,MAAAA,QAAQ,CAAC1B,UAAU,CAAC2B,IAAD,CAAX,CAAR;AAA4B;AAFlD,GAAN;AAID,CALD;;AAOA,eAAe9B,OAAO,CAACyB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CxB,IAA7C,CAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {connect} from 'react-redux';\n\nimport {fetchTodo} from '../requests/fetchApi'\nimport {todoCommit} from '../actions/getDataActions'\nimport {dataStatus} from '../actions/dataStatusActions'\n\nfunction Todo(props){\n  const [fetchedTodo, setFetchedTodo] = useState('');\n  const [todoItems, setTodoItems] = useState('');\n  const [dataStatus, setDataStatus] = useState();\n\n  // get data after the first render\n  useEffect(()=>{\n      fetchTodo().then((result)=>{\n      props.todoCommit({body: result})\n    })\n  }, [])\n\n  // map data when ever fetchedTodo is updated\n  useEffect(()=>{\n    const renderTodo = Array.from(fetchedTodo).reverse().map((item)=>{\n      return <li key={item.id}>{item.body}</li>\n    })\n    setTodoItems(renderTodo)\n  }, [fetchedTodo])\n\n  // update data when ever store is updated and not an empty array\n  useEffect(()=>{\n    (props.todo != [] && props.loader == null)? setFetchedTodo(props.todo) : console.log();;\n  }, [props.todo])\n\n\n    return(\n      <div id=\"todo-container\">\n        <p className=\"container-title red-title\">Todo</p>\n        <ul id=\"todo-list\">\n          {todoItems}\n        </ul>\n      </div>\n    )\n}\n\nconst mapStateToProps = (state, ownProps)=>{\n  const {todo, loader} = state;\n  console.log(state);\n  return{\n    todo: todo,\n    loader: loader\n  }\n}\nconst mapDispatchToProps = (dispatch)=>{\n  return{\n    todoCommit: (data)=>{ dispatch(todoCommit(data)) },\n    todoDataStatus: (data)=>{ dispatch(dataStatus(data)) }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo);\n"]},"metadata":{},"sourceType":"module"}