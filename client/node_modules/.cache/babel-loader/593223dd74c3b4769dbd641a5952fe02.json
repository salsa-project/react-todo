{"ast":null,"code":"import _slicedToArray from \"/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Todo from './components/todo.js';\nimport InProgress from './components/inprogress.js';\nimport Done from './components/done.js';\nimport './App.css';\n\nfunction App() {\n  //some text comes from the server\n  const _useState = useState('some text'),\n        _useState2 = _slicedToArray(_useState, 2),\n        text = _useState2[0],\n        setText = _useState2[1]; //newTodoLayout display style (display/hide)\n\n\n  const _useState3 = useState('none'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newTodoDisplay = _useState4[0],\n        setNewTodoDisplay = _useState4[1]; //newTodo text\n\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        newTodoText = _useState6[0],\n        setNewTodoText = _useState6[1]; //call 'api/hello' to try server response\n\n\n  const callApi = async () => {\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n    if (response.status != 200) throw Error(body.message);\n    return body;\n  };\n\n  const getTodos = as;\n  useEffect(() => {\n    callApi().then(res => {\n      setText(res.express);\n    });\n  }, []); //display/hide newTodoLayout container\n\n  function newTodoLayoutDisplay(e) {\n    newTodoDisplay == 'none' ? setNewTodoDisplay('flex') : setNewTodoDisplay('none');\n  } //display the newTodo text in the input\n\n\n  function newTodoInputHandler(e) {\n    setNewTodoText(e.target.value);\n  } //\n\n\n  function addNewTodoHandler(e) {\n    if (newTodoText.length < 3) return;\n    let newTodoStore = newTodoText;\n    fetch(\"/newTodo\", {\n      method: \"post\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      //make sure to serialize your JSON body\n      body: JSON.stringify({\n        body: newTodoStore\n      })\n    }).then(response => {\n      response.json().then(data => {\n        if (data.status) {\n          setNewTodoText('');\n        }\n      });\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    id: \"title\",\n    contenteditable: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Call out API\"), React.createElement(\"p\", {\n    id: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, text), React.createElement(\"div\", {\n    id: \"manager\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Todo, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(InProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(Done, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    id: \"new-todo-input-display\",\n    onClick: newTodoLayoutDisplay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"+\"), React.createElement(\"div\", {\n    id: \"new-todo-input\",\n    style: {\n      display: newTodoDisplay\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    value: newTodoText,\n    onChange: newTodoInputHandler,\n    placeholder: \"new todo..\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: addNewTodoHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Add\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/src/App.js"],"names":["React","useState","useEffect","Todo","InProgress","Done","App","text","setText","newTodoDisplay","setNewTodoDisplay","newTodoText","setNewTodoText","callApi","response","fetch","body","json","status","Error","message","getTodos","as","then","res","express","newTodoLayoutDisplay","e","newTodoInputHandler","target","value","addNewTodoHandler","length","newTodoStore","method","headers","JSON","stringify","data","display"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACb;AADa,oBAEWL,QAAQ,CAAC,WAAD,CAFnB;AAAA;AAAA,QAENM,IAFM;AAAA,QAEAC,OAFA,kBAGb;;;AAHa,qBAI+BP,QAAQ,CAAC,MAAD,CAJvC;AAAA;AAAA,QAINQ,cAJM;AAAA,QAIUC,iBAJV,kBAKb;;;AALa,qBAMwBT,QAAQ,CAAC,EAAD,CANhC;AAAA;AAAA,QAMPU,WANO;AAAA,QAMMC,cANN,kBAQb;;;AACA,QAAMC,OAAO,GAAG,YAAU;AACxB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEA,QAAGH,QAAQ,CAACI,MAAT,IAAmB,GAAtB,EAA2B,MAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AAE3B,WAAOJ,IAAP;AACD,GAPD;;AAQA,QAAMK,QAAQ,GAAGC,EAAjB;AAEApB,EAAAA,SAAS,CAAC,MAAI;AACZW,IAAAA,OAAO,GAAGU,IAAV,CAAeC,GAAG,IAAE;AAClBhB,MAAAA,OAAO,CAACgB,GAAG,CAACC,OAAL,CAAP;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT,CAnBa,CAyBb;;AACA,WAASC,oBAAT,CAA8BC,CAA9B,EAAgC;AAC7BlB,IAAAA,cAAc,IAAI,MAAnB,GAA4BC,iBAAiB,CAAC,MAAD,CAA7C,GAAuDA,iBAAiB,CAAC,MAAD,CAAxE;AACD,GA5BY,CA6Bb;;;AACA,WAASkB,mBAAT,CAA6BD,CAA7B,EAA+B;AAC7Bf,IAAAA,cAAc,CAACe,CAAC,CAACE,MAAF,CAASC,KAAV,CAAd;AACD,GAhCY,CAiCb;;;AACA,WAASC,iBAAT,CAA2BJ,CAA3B,EAA6B;AAC3B,QAAGhB,WAAW,CAACqB,MAAZ,GAAqB,CAAxB,EAA2B;AAC3B,QAAIC,YAAY,GAAGtB,WAAnB;AAEAI,IAAAA,KAAK,CAAC,UAAD,EAAa;AAChBmB,MAAAA,MAAM,EAAE,MADQ;AAEhBC,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT,OAFO;AAMlB;AACAnB,MAAAA,IAAI,EAAEoB,IAAI,CAACC,SAAL,CAAe;AACjBrB,QAAAA,IAAI,EAAEiB;AADW,OAAf;AAPY,KAAb,CAAL,CAUGV,IAVH,CAUST,QAAD,IAAc;AACpBA,MAAAA,QAAQ,CAACG,IAAT,GAAgBM,IAAhB,CAAsBe,IAAD,IAAQ;AAC3B,YAAGA,IAAI,CAACpB,MAAR,EAAe;AAEbN,UAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,OALD;AAMD,KAjBD;AAmBD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,EAAE,EAAC,OAAP;AAAe,IAAA,eAAe,EAAC,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAG,IAAA,EAAE,EAAC,aAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBL,IAArB,CAFF,EAGE;AAAK,IAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAHF,EAQE;AAAQ,IAAA,EAAE,EAAC,wBAAX;AAAoC,IAAA,OAAO,EAAEmB,oBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SARF,EASE;AAAK,IAAA,EAAE,EAAC,gBAAR;AAAyB,IAAA,KAAK,EAAE;AAACa,MAAAA,OAAO,EAAE9B;AAAV,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEE,WAA1B;AAAuC,IAAA,QAAQ,EAAEiB,mBAAjD;AAAsE,IAAA,WAAW,EAAC,YAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,OAAO,EAAEG,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,CATF,CADF;AAgBD;;AAED,eAAezB,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport Todo from './components/todo.js'\nimport InProgress from './components/inprogress.js'\nimport Done from './components/done.js'\nimport './App.css';\n\nfunction App() {\n  //some text comes from the server\n  const [text, setText] = useState('some text');\n  //newTodoLayout display style (display/hide)\n  const [newTodoDisplay, setNewTodoDisplay] = useState('none');\n  //newTodo text\n  const[newTodoText, setNewTodoText] = useState('')\n\n  //call 'api/hello' to try server response\n  const callApi = async ()=>{\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n\n    if(response.status != 200) throw Error(body.message)\n\n    return body;\n  }\n  const getTodos = as\n\n  useEffect(()=>{\n    callApi().then(res=>{\n      setText(res.express)\n    })\n  }, [])\n\n  //display/hide newTodoLayout container\n  function newTodoLayoutDisplay(e){\n    (newTodoDisplay == 'none')? setNewTodoDisplay('flex'): setNewTodoDisplay('none');\n  }\n  //display the newTodo text in the input\n  function newTodoInputHandler(e){\n    setNewTodoText(e.target.value);\n  }\n  //\n  function addNewTodoHandler(e){\n    if(newTodoText.length < 3) return ;\n    let newTodoStore = newTodoText;\n\n    fetch(\"/newTodo\", {\n      method: \"post\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    //make sure to serialize your JSON body\n    body: JSON.stringify({\n        body: newTodoStore\n      })\n    }).then((response) => {\n      response.json().then((data)=>{\n        if(data.status){\n\n          setNewTodoText('');\n        }\n      })\n    })\n\n  }\n\n  return (\n    <div className=\"App\">\n      <h2 id=\"title\" contenteditable=\"true\">Call out API</h2>\n      <p id=\"description\">{text}</p>\n      <div id=\"manager\">\n        <Todo />\n        <InProgress />\n        <Done />\n      </div>\n      <button id=\"new-todo-input-display\" onClick={newTodoLayoutDisplay}>+</button>\n      <div id=\"new-todo-input\" style={{display: newTodoDisplay}}>\n        <input type=\"text\" value={newTodoText} onChange={newTodoInputHandler} placeholder=\"new todo..\" />\n        <button onClick={addNewTodoHandler}>Add</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}