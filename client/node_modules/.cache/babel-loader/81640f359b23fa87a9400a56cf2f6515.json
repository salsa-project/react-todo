{"ast":null,"code":"import _slicedToArray from \"/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/src/components/todo.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { GET_TODO_REQUESTED, GET_TODO_SUCCEEDED, GET_TODO_FAILED } from '../requests/fetchState';\nimport { fetchTodo } from '../requests/fetchApi';\n\nfunction Todo(props) {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        fetchedTodo = _useState2[0],\n        setFetchedTodo = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        todoItems = _useState4[0],\n        setTodoItems = _useState4[1];\n\n  const _useState5 = useState(GET_TODO_REQUESTED),\n        _useState6 = _slicedToArray(_useState5, 2),\n        dataStatus = _useState6[0],\n        setDataStatus = _useState6[1]; // get data after the first render\n\n\n  useEffect(() => {\n    fetchTodo().then(result => {\n      props.todoCommit({\n        type: 'todo-data',\n        body: result\n      });\n    });\n  }, []); // map data when ever fetchedTodo is updated\n\n  useEffect(() => {\n    const renderTodo = Array.from(fetchedTodo).reverse().map(item => {\n      return React.createElement(\"li\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, item.body);\n    });\n    setTodoItems(renderTodo);\n  }, [fetchedTodo]); // update data when ever store is updated\n\n  useEffect(() => {\n    setFetchedTodo(props.todo);\n  }, [props.todo]); // {todoItems || <div><div id=\"spinner\"></div> <p style={{color: 'gray'}}>fetching data..</p></div>}\n\n  return React.createElement(\"div\", {\n    id: \"todo-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"container-title red-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Todo\"), React.createElement(\"ul\", {\n    id: \"todo-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, dataStatus == GET_TODO_REQUESTED));\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const todo = state.todo;\n  return {\n    todo: todo\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    todoCommit: data => {\n      return dispatch(data);\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo);","map":{"version":3,"sources":["/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/src/components/todo.js"],"names":["React","useState","useEffect","connect","GET_TODO_REQUESTED","GET_TODO_SUCCEEDED","GET_TODO_FAILED","fetchTodo","Todo","props","fetchedTodo","setFetchedTodo","todoItems","setTodoItems","dataStatus","setDataStatus","then","result","todoCommit","type","body","renderTodo","Array","from","reverse","map","item","id","todo","mapStateToProps","state","ownProps","mapDispatchToProps","dispatch","data"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,SAAQC,kBAAR,EAA4BC,kBAA5B,EAAgDC,eAAhD,QAAsE,wBAAtE;AACA,SAAQC,SAAR,QAAwB,sBAAxB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAoB;AAAA,oBACoBR,QAAQ,CAAC,EAAD,CAD5B;AAAA;AAAA,QACXS,WADW;AAAA,QACEC,cADF;;AAAA,qBAEgBV,QAAQ,CAAC,EAAD,CAFxB;AAAA;AAAA,QAEXW,SAFW;AAAA,QAEAC,YAFA;;AAAA,qBAGkBZ,QAAQ,CAACG,kBAAD,CAH1B;AAAA;AAAA,QAGXU,UAHW;AAAA,QAGCC,aAHD,kBAKlB;;;AACAb,EAAAA,SAAS,CAAC,MAAI;AACVK,IAAAA,SAAS,GAAGS,IAAZ,CAAkBC,MAAD,IAAU;AAC3BR,MAAAA,KAAK,CAACS,UAAN,CAAiB;AAACC,QAAAA,IAAI,EAAE,WAAP;AAAoBC,QAAAA,IAAI,EAAEH;AAA1B,OAAjB;AACD,KAFC;AAGH,GAJQ,EAIN,EAJM,CAAT,CANkB,CAYlB;;AACAf,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMmB,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWb,WAAX,EAAwBc,OAAxB,GAAkCC,GAAlC,CAAuCC,IAAD,IAAQ;AAC/D,aAAO;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmBD,IAAI,CAACN,IAAxB,CAAP;AACD,KAFkB,CAAnB;AAGAP,IAAAA,YAAY,CAACQ,UAAD,CAAZ;AACD,GALQ,EAKN,CAACX,WAAD,CALM,CAAT,CAbkB,CAoBlB;;AACAR,EAAAA,SAAS,CAAC,MAAI;AACZS,IAAAA,cAAc,CAACF,KAAK,CAACmB,IAAP,CAAd;AACD,GAFQ,EAEN,CAACnB,KAAK,CAACmB,IAAP,CAFM,CAAT,CArBkB,CAyBlB;;AAEE,SACE;AAAK,IAAA,EAAE,EAAC,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,2BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAI,IAAA,EAAE,EAAC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,UAAU,IAAIV,kBADjB,CAFF,CADF;AAQH;;AAED,MAAMyB,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAmB;AAAA,QAClCH,IADkC,GAC1BE,KAD0B,CAClCF,IADkC;AAEzC,SAAM;AACJA,IAAAA,IAAI,EAAEA;AADF,GAAN;AAGD,CALD;;AAMA,MAAMI,kBAAkB,GAAIC,QAAD,IAAY;AACrC,SAAM;AACJf,IAAAA,UAAU,EAAGgB,IAAD,IAAQ;AAClB,aAAOD,QAAQ,CAACC,IAAD,CAAf;AACD;AAHG,GAAN;AAKD,CAND;;AAQA,eAAe/B,OAAO,CAAC0B,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CxB,IAA7C,CAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {connect} from 'react-redux';\n\nimport {GET_TODO_REQUESTED, GET_TODO_SUCCEEDED, GET_TODO_FAILED} from '../requests/fetchState'\nimport {fetchTodo} from '../requests/fetchApi'\n\nfunction Todo(props){\n  const [fetchedTodo, setFetchedTodo] = useState('');\n  const [todoItems, setTodoItems] = useState('');\n  const [dataStatus, setDataStatus] = useState(GET_TODO_REQUESTED);\n\n  // get data after the first render\n  useEffect(()=>{\n      fetchTodo().then((result)=>{\n      props.todoCommit({type: 'todo-data', body: result})\n    })\n  }, [])\n\n  // map data when ever fetchedTodo is updated\n  useEffect(()=>{\n    const renderTodo = Array.from(fetchedTodo).reverse().map((item)=>{\n      return <li key={item.id}>{item.body}</li>\n    })\n    setTodoItems(renderTodo)\n  }, [fetchedTodo])\n\n  // update data when ever store is updated\n  useEffect(()=>{\n    setFetchedTodo(props.todo)\n  }, [props.todo])\n\n  // {todoItems || <div><div id=\"spinner\"></div> <p style={{color: 'gray'}}>fetching data..</p></div>}\n\n    return(\n      <div id=\"todo-container\">\n        <p className=\"container-title red-title\">Todo</p>\n        <ul id=\"todo-list\">\n          {dataStatus == GET_TODO_REQUESTED}\n        </ul>\n      </div>\n    )\n}\n\nconst mapStateToProps = (state, ownProps)=>{\n  const {todo} = state;\n  return{\n    todo: todo\n  }\n}\nconst mapDispatchToProps = (dispatch)=>{\n  return{\n    todoCommit: (data)=>{\n      return dispatch(data)\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo);\n"]},"metadata":{},"sourceType":"module"}