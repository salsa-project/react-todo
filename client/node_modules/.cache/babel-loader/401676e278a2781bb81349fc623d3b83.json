{"ast":null,"code":"import _slicedToArray from \"/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/src/components/todo.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchTodo } from '../requests/fetchApi';\nimport { todoCommit } from '../actions/getDataActions';\nimport { dataStatus } from '../actions/dataStatusActions';\nimport { GET_TODO_REQUESTED, GET_TODO_SUCCEEDED, GET_TODO_FAILED } from '../requests/fetchState';\n\nfunction Todo(props) {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        fetchedTodo = _useState2[0],\n        setFetchedTodo = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        todoItems = _useState4[0],\n        setTodoItems = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        dataStatus = _useState6[0],\n        setDataStatus = _useState6[1]; // set dataStatus\n  // get data after the first render\n\n\n  useEffect(() => {\n    props.todoDataStatus(GET_TODO_REQUESTED);\n    fetchTodo().then(result => {\n      props.todoDataStatus(GET_TODO_SUCCEEDED);\n      props.todoCommit({\n        body: result\n      });\n    });\n  }, []); // map data when ever fetchedTodo is updated\n\n  useEffect(() => {\n    const renderTodo = Array.from(fetchedTodo).reverse().map(item => {\n      return React.createElement(\"li\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, item.body);\n    });\n    setTodoItems(renderTodo);\n  }, [fetchedTodo]); // update data when ever store is updated and not an empty array\n\n  useEffect(() => {\n    props.todo != [] && props.loader == true && props.err == false && setFetchedTodo(props.todo);\n  }, [props.todo]);\n  return React.createElement(\"div\", {\n    id: \"todo-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"container-title red-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Todo\"), React.createElement(\"ul\", {\n    id: \"todo-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, props.loader == true ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"spinner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), \" \", React.createElement(\"p\", {\n    style: {\n      color: 'gray'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"fetching data..\")) : todoItems));\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  console.log(state);\n  const todo = state.todo,\n        loader = state.loader,\n        err = state.err;\n  return {\n    todo: todo,\n    loader: loader,\n    err: err\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    todoCommit: data => {\n      dispatch(todoCommit(data));\n    },\n    todoDataStatus: data => {\n      dispatch(dataStatus(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo);","map":{"version":3,"sources":["/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/src/components/todo.js"],"names":["React","useState","useEffect","connect","fetchTodo","todoCommit","dataStatus","GET_TODO_REQUESTED","GET_TODO_SUCCEEDED","GET_TODO_FAILED","Todo","props","fetchedTodo","setFetchedTodo","todoItems","setTodoItems","setDataStatus","todoDataStatus","then","result","body","renderTodo","Array","from","reverse","map","item","id","todo","loader","err","color","mapStateToProps","state","ownProps","console","log","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {connect} from 'react-redux';\n\nimport {fetchTodo} from '../requests/fetchApi'\nimport {todoCommit} from '../actions/getDataActions'\nimport {dataStatus} from '../actions/dataStatusActions'\nimport {GET_TODO_REQUESTED, GET_TODO_SUCCEEDED, GET_TODO_FAILED} from '../requests/fetchState'\n\nfunction Todo(props){\n  const [fetchedTodo, setFetchedTodo] = useState('');\n  const [todoItems, setTodoItems] = useState('');\n  const [dataStatus, setDataStatus] = useState();\n\n  // set dataStatus\n  // get data after the first render\n  useEffect(()=>{\n      props.todoDataStatus(GET_TODO_REQUESTED)\n      fetchTodo().then((result)=>{\n        props.todoDataStatus(GET_TODO_SUCCEEDED)\n        props.todoCommit({body: result})\n    })\n  }, [])\n\n  // map data when ever fetchedTodo is updated\n  useEffect(()=>{\n    const renderTodo = Array.from(fetchedTodo).reverse().map((item)=>{\n      return <li key={item.id}>{item.body}</li>\n    })\n    setTodoItems(renderTodo)\n  }, [fetchedTodo])\n\n  // update data when ever store is updated and not an empty array\n  useEffect(()=>{\n    (props.todo != [] && props.loader == true && props.err == false) && setFetchedTodo(props.todo) ;\n  }, [props.todo])\n\n\n    return(\n      <div id=\"todo-container\">\n        <p className=\"container-title red-title\">Todo</p>\n        <ul id=\"todo-list\">\n        {(props.loader == true) ? <div><div id='spinner'></div> <p style={{color: 'gray'}}>fetching data..</p></div> : todoItems}\n        </ul>\n      </div>\n    )\n}\n\nconst mapStateToProps = (state, ownProps)=>{\n  console.log(state);\n  const {todo, loader, err} = state;\n  return{\n    todo: todo,\n    loader: loader,\n    err: err\n  }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n  return{\n    todoCommit: (data)=>{ dispatch(todoCommit(data)) },\n    todoDataStatus: (data)=>{ dispatch(dataStatus(data)) }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo);\n"]},"metadata":{},"sourceType":"module"}