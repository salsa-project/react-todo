{"ast":null,"code":"import _slicedToArray from \"/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/src/components/done.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchDone } from '../requests/fetchApi';\nimport { dataStatus } from '../actions/dataStatusActions';\nimport { doneCommit } from '../actions/getDataActions';\nimport { GET_DONE_REQUESTED, GET_DONE_SUCCEEDED, GET_DONE_FAILED } from '../requests/fetchState';\n\nfunction Done(props) {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        fetchedDone = _useState2[0],\n        setFetchedDone = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        done = _useState4[0],\n        setDone = _useState4[1];\n\n  useEffect(() => {\n    props.doneDataStatus(GET_DONE_REQUESTED);\n    const dones = fetchDone().then(result => {\n      props.doneDataStatus(GET_DONE_SUCCEEDED);\n      props.doneCommit({\n        body: result\n      });\n    });\n  }, []);\n  useEffect(() => {\n    props.done != [] && setFetchedDone(props.done);\n  }, [props.done]);\n  useEffect(() => {\n    const data = Array.from(fetchedDone).reverse().map(item => {\n      return React.createElement(\"li\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, item.body);\n    });\n    setDone(data);\n  }, [fetchedDone]);\n  return React.createElement(\"div\", {\n    id: \"done-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"container-title green-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Done\"), React.createElement(\"ul\", {\n    id: \"done-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, props.loader ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"spinner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), \" \", React.createElement(\"p\", {\n    style: {\n      color: 'gray'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"fetching data..\")) : done));\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const done = state.done,\n        loader = state.loader,\n        err = state.err;\n  return {\n    done: done,\n    loader: loader.done,\n    err: err.done\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    doneCommit: data => {\n      dispatch(doneCommit(data));\n    },\n    doneDataStatus: data => {\n      dispatch(dataStatus(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Done);","map":{"version":3,"sources":["/home/mrsalsa/Desktop/Node.js Lessons/React.js/React 04-01-2020/fullstack-mern/client/src/components/done.js"],"names":["React","useState","useEffect","connect","fetchDone","dataStatus","doneCommit","GET_DONE_REQUESTED","GET_DONE_SUCCEEDED","GET_DONE_FAILED","Done","props","fetchedDone","setFetchedDone","done","setDone","doneDataStatus","dones","then","result","body","data","Array","from","reverse","map","item","id","loader","color","mapStateToProps","state","ownProps","err","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {connect} from 'react-redux'\n\nimport {fetchDone} from '../requests/fetchApi'\nimport {dataStatus} from '../actions/dataStatusActions'\nimport {doneCommit} from '../actions/getDataActions'\nimport {GET_DONE_REQUESTED, GET_DONE_SUCCEEDED, GET_DONE_FAILED} from '../requests/fetchState'\n\nfunction Done(props){\n\n  const [fetchedDone, setFetchedDone] = useState('');\n  const [done, setDone] = useState('');\n\n  useEffect(()=>{\n    props.doneDataStatus(GET_DONE_REQUESTED);\n    const dones = fetchDone().then((result)=>{\n      props.doneDataStatus(GET_DONE_SUCCEEDED);\n      props.doneCommit({body: result});\n    })\n  }, [])\n\n  useEffect(()=>{\n    (props.done != []) && setFetchedDone(props.done)\n  }, [props.done])\n\n  useEffect(()=>{\n    const data = Array.from(fetchedDone).reverse().map((item)=>{\n      return <li key={item.id}>{item.body}</li>\n    })\n    setDone(data)\n  }, [fetchedDone])\n\n  return(\n    <div id=\"done-container\">\n      <p className=\"container-title green-title\">Done</p>\n      <ul id=\"done-list\">\n        {(props.loader)? <div><div id=\"spinner\"></div> <p style={{color: 'gray'}}>fetching data..</p></div> : done}\n      </ul>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state, ownProps)=>{\n  const {done, loader, err} = state;\n  return{\n    done: done,\n    loader: loader.done,\n    err: err.done\n  }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n  return{\n    doneCommit: (data)=>{dispatch(doneCommit(data))},\n    doneDataStatus: (data)=>{dispatch(dataStatus(data))}\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Done)\n"]},"metadata":{},"sourceType":"module"}